
import { supabase } from "@/integrations/supabase/client";
import { type CreateOrganizationFormData } from "../schema";
import { type OrganizationStatus } from "@/types/organization-types";
import { toast } from "sonner";

export const useOrganizationSubmission = (onSuccess: () => void) => {
  const checkExistingOrganization = async (cnpj: string): Promise<boolean> => {
    try {
      // Garantir que estamos verificando apenas os d√≠gitos do CNPJ
      const cleanedCnpj = cnpj.replace(/[^\d]/g, '');
      
      console.log("Verificando CNPJ na submiss√£o:", cleanedCnpj);
      
      // Verificar se j√° existe uma organiza√ß√£o com este CNPJ
      const { data, error } = await supabase
        .from('organizations')
        .select('id')
        .eq('cnpj', cleanedCnpj)
        .maybeSingle();
      
      if (error) {
        console.error("‚ùå Erro ao verificar CNPJ:", error);
        throw error;
      }
      
      return !!data; // Retorna true se uma organiza√ß√£o com este CNPJ existir
    } catch (error) {
      console.error("‚ùå Erro ao verificar CNPJ:", error);
      throw error; // Propagar erro para tratamento adequado
    }
  };

  const handleSubmit = async (values: CreateOrganizationFormData) => {
    try {
      // Limpar CNPJ para garantir formato consistente no banco
      const cleanedCnpj = values.cnpj.replace(/[^\d]/g, '');
      
      // Verificar se j√° existe uma organiza√ß√£o com este CNPJ
      const exists = await checkExistingOrganization(cleanedCnpj);
      
      if (exists) {
        toast.error("Uma organiza√ß√£o com este CNPJ j√° existe no sistema.");
        return;
      }

      // Dados m√≠nimos necess√°rios para criar uma organiza√ß√£o
      const orgData = {
        name: values.razaoSocial,
        cnpj: cleanedCnpj, // Usar CNPJ limpo
        admin_email: values.adminEmail,
        admin_name: values.adminName,
        plan: values.plan,
        status: "pending" as OrganizationStatus,
        nome_fantasia: values.nomeFantasia,
        phone: values.phone,
        admin_phone: values.adminPhone
      };

      console.log("üìù Tentando criar organiza√ß√£o com dados:", JSON.stringify(orgData, null, 2));

      // Inser√ß√£o simplificada sem op√ß√µes adicionais
      const { error } = await supabase
        .from('organizations')
        .insert(orgData);

      if (error) {
        console.error("‚ùå Erro ao inserir organiza√ß√£o:", error);
        
        // Verificar se o erro √© de duplica√ß√£o
        if (error.code === '23505') { // C√≥digo para viola√ß√£o de chave √∫nica
          toast.error("Uma organiza√ß√£o com este CNPJ j√° existe no sistema.");
        } else {
          toast.error("Erro ao criar organiza√ß√£o: " + error.message);
        }
        
        throw error;
      }

      console.log("‚úÖ Organiza√ß√£o criada com sucesso!");
      toast.success("Organiza√ß√£o criada com sucesso!");
      onSuccess();

    } catch (error) {
      console.error("‚ùå Erro ao criar organiza√ß√£o:", error);
      toast.error("Falha ao criar organiza√ß√£o. Por favor, tente novamente.");
      throw error;
    }
  };

  return { handleSubmit };
};
